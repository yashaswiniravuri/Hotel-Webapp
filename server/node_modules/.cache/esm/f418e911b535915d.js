let User,jwt;_b53‍.x([["register",()=>register],["login",()=>login]]);_b53‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_b53‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);


       const register = async (req, res) => {
    _b53‍.g.console.log(req.body);
    const { name, email, password } = req.body;
    //validation
    if (!name) return res.status(400).send('Name is required')
    if (!password || password.length < 6)
        return res
            .status(400)
            .send('Password is required and should be min 6 characters long');
    let userExist = await User.findOne({ email }).exec()
    if (userExist) return res.status(400).send('Email is taken')
    //register
    const user = new User(req.body)
    try {
        await user.save();
        _b53‍.g.console.log('USER CREATED',user);
        return res.json({ok:true});
    } catch (err) {
        _b53‍.g.console.log('CREATE USER FAILED',err)
        return res.status(400).send('Error. Try again')
    }
}
       const login=async(req, res)=>{
    //console.log(req.body);
    const{email,password}=req.body;
    try{
        //check if user with that email exist
       let user = await User.findOne({email}).exec();
        //console.log('USER EXIST',user);
        if(!user) res.status(400).send("User with that email not found");
        //compare password
        
        user.comparePassword(password, (err, match)=>{
            //console.log('COMPARE PASSWORD IN LOGIN ERR', err)
            if(!match|| err) return res.status(400).send("Wrong password");
            //"generate a token then send as response to client");
           let token = jwt.sign({_id:user._id},process.env.JWT_SECRET,{
                expiresIn:'7d',//7 days
            });
            res.json({token, user:{
                _id:user._id,
                name:user.name,
                email:user.email,
                createdAt:user.createdAt,
                updatedAt:user.updatedAt
            }});
        });
    }catch(err){
        _b53‍.g.console.log("LOGIN ERROR",err);
        res.status(400).send("Signin failed");
    }
}